# -*- coding: utf-8 -*-
"""Mileage prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q9gIC22Fr0m3YSlPSVNYoIb4rb8EN7MX

# **Mileage Prediction**

## **Objective**

**The objective of this project is to predict the fuel efficiency (miles per gallon, or mpg) of vehicles using various features, such as engine displacement, horsepower, weight, and acceleration. The model aims to estimate fuel efficiency accurately and compare linear and polynomial regression techniques to determine which model yields better predictive accuracy.**

## **Data Source**

https://github.com/YBI-Foundation/Dataset/blob/main/MPG.csv

## **Import Library**
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

"""## **Import Data**"""

df = pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/MPG.csv')

df.head()

df.nunique()

"""## **Data Preprocessing**"""

df.info()

df.describe()

"""## **Remove Missing Value**"""

df=df.dropna()

df.info()

"""## **Data Visualization**"""

sns.pairplot(df, x_vars=['displacement','horsepower', 'weight','acceleration','mpg'],y_vars=['mpg']);

sns.regplot(x='displacement', y= 'mpg',data=df)

"""## **Define Target Variable y and Feature X**"""

df.columns

y = df['mpg']

y.shape

X = df[['displacement','horsepower','weight','acceleration']]

X.shape

X

"""## **Scaling Data**"""

from sklearn.preprocessing import StandardScaler

ss = StandardScaler()

X = ss.fit_transform(X)

X

pd.DataFrame(X).describe()

"""**After Standardization Mean is Zero and Standard Deviation is one**

## **Train Test Split Data**
"""

from sklearn.model_selection import train_test_split



X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, random_state = 2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""## **Linear Regression Model**"""

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(X_train, y_train)

lr.intercept_

lr.coef_

"""**Mileage = 23.4  -1.05 Displacement -1.68 Horsepower -4.10 Weight -0.115 Acceleration+error**

## **Predict Test Data**
"""

y_pred = lr.predict(X_test)

y_pred

"""## **Model Accuracy**"""

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_score

mean_absolute_error(y_test,y_pred)

mean_absolute_percentage_error(y_test,y_pred)

r2_score(y_test, y_pred)

"""## **Polynomial Regression**"""

from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)

X_train2 = poly.fit_transform(X_train)

X_test2 = poly.fit_transform(X_test)

lr.fit(X_train2, y_train)

lr.intercept_

lr.coef_

y_pred_poly = lr.predict(X_test2)

"""## **Model Accuracy**"""

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_score

mean_absolute_error(y_test, y_pred_poly)

mean_absolute_percentage_error(y_test, y_pred_poly)

r2_score(y_test, y_pred_poly)

"""## **Explanation**

**Data Import and Preprocessing:**

Imported libraries (pandas, numpy, matplotlib.pyplot, seaborn) for data handling and visualization.
Loaded the dataset, checked for unique values in each column, and examined the data structure.
Identified missing values in the 'horsepower' column and removed them to ensure data consistency for model training.

**Data Visualization:**

Used pair plots and regression plots to explore relationships between mpg and other variables (displacement, horsepower, weight, and acceleration). These visualizations helped to understand linear correlations that may exist in the data.

**Feature Selection and Target Definition:**

Defined mpg as the target variable (y) and selected displacement, horsepower, weight, and acceleration as features (X).
Standardized X to bring all features to a similar scale, improving model performance by ensuring consistent feature contributions.
Data Splitting:

Split the data into training and testing sets with a 70-30 ratio to train the model on a subset of data and evaluate it on unseen data.

**Modeling:**

Linear Regression:
Built a simple linear regression model to predict mpg using selected features.
Model coefficients indicated each feature’s contribution to the prediction, showing how displacement, horsepower, weight, and acceleration impact mpg.

Polynomial Regression:
Introduced polynomial features (second-degree terms) to capture interactions and non-linear relationships in the data.
This model provided a more complex approach, capturing nuances that linear regression may overlook.

**Model Evaluation:**

Evaluated both models using metrics such as Mean Absolute Error (MAE), Mean Absolute Percentage Error (MAPE), and R² score:
Linear Regression: MAE = 3.33, MAPE = 14.7%, R² = 0.703
Polynomial Regression: MAE = 2.79, MAPE = 12.1%, R² = 0.746
The polynomial regression outperformed linear regression, with a lower MAE and higher R², suggesting better predictive accuracy for fuel efficiency.
"""